shader_type spatial;

uniform vec4 albedo : source_color = vec4(1.0);
uniform vec4 wire_color : source_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float wire_width : hint_range(0.0, 40.0) = 5.0;
uniform float wire_smoothness : hint_range(0.0, 0.1) = 0.01;

varying vec3 barys;

void vertex() {
	int index = VERTEX_ID % 3;
	switch (index) {
		case 0:
			barys = vec3(1.0, 0.0, 0.0);
			break;
		case 1:
			barys = vec3(0.0, 1.0, 0.0);
			break;
		case 2:
			barys = vec3(0.0, 0.0, 1.0);
			break;
	}
}

void fragment() {
	vec3 deltas = fwidth(barys);
	vec3 barys_s = smoothstep(deltas * wire_width - wire_smoothness, deltas * wire_width + wire_smoothness, barys);
	float wires = min(barys_s.x, min(barys_s.y, barys_s.z));
	
	// remove middle line
	if (floor(UV.x * 10.) + 0.02 <= UV.x * 10.
		&& floor(UV.y * 10.) + 0.02 <= UV.y * 10.) {
		wires = 1.;
	}
	
	vec3 wire_effect = vec3 (0.1 *abs(tan(TIME * 0.4)));
	
	ALBEDO = mix(wire_color.rgb + wire_effect, albedo.rgb, wires);
}